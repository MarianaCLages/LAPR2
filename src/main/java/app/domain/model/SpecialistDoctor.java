package app.domain.model;

import app.domain.shared.Constants;
import app.domain.shared.Email;
import app.domain.shared.PasswordGenerator;
import auth.AuthFacade;
import org.apache.commons.lang3.StringUtils;

import java.io.Serializable;

/**
 * Class that represents an Specialist Doctor
 */
public class SpecialistDoctor extends Employee implements Serializable {

    private final String doctorIndexNumber;
    private String name;
    private String email;


    /**
     * Constructor of the Employee which is an subclass of Employee , it calls methods in order to validate the parameters
     *
     * @param employeeID        unique ID generated by the system for the Specialist Doctor
     * @param name              name of the Specialist Doctor
     * @param address           address of the Specialist Doctor
     * @param phonenumber       Phone number of the Specialist Doctor
     * @param email             email of the Employee
     * @param sOC               standard occupation code of the Specialist Doctor
     * @param doctorIndexNumber Doctor Index Number of the Specialist Doctor
     * @param role              role of the Specialist Doctor
     */
    public SpecialistDoctor(String employeeID, String name, String address, String phonenumber, String email, String sOC, String doctorIndexNumber, Role role) {
        super(employeeID, name, address, phonenumber, email, sOC, role);

        checkDoctorIndexNumberRules(doctorIndexNumber);

        this.doctorIndexNumber = doctorIndexNumber;


    }
    /**
     * Checks if the string that is received is only numerical using the class NumberUtils
     *
     * @param i The String that is going to be checked
     * @return boolean value that is positive if the parameter is only numerical
     */
    private boolean checkIfIsNumerical2(String i) {
        return !(i.matches("[0-9]+"));

    }

    /**
     * Checks if the string that is received meets the requirements of the Doctor Index Number, if not throws Exceptions
     *
     * @param doctorIndexNumber Doctor Index Number of the client
     */
    private void checkDoctorIndexNumberRules(String doctorIndexNumber) {
        if (StringUtils.isBlank(doctorIndexNumber))
            throw new IllegalArgumentException("Doctor Index Number cannot be blank.");

        if(checkIfIsNumerical2(doctorIndexNumber)){
                throw new IllegalArgumentException("Doctor Index Number only accepts numbers");

        }
    }

    /**
     * Adds a new user to the system with the role of the Specialist Doctor using the getPassword method to create the user's password
     *
     * @return a boolean value representing the success of the operation
     */

    @Override
    public boolean addUserWithRole(Company company) {
        boolean success = false;
        String password = PasswordGenerator.getPassword();
        AuthFacade authFacade = company.getAuthFacade();
        success = authFacade.addUserWithRole(this.name, this.email, password, Constants.ROLE_SPECIALISTDOCTOR);
        if (success) {
            Email.sendPasswordNotification(this.name, this.email, password);

        }
        return success;
    }

    /**
     * @return A string with the format "Employee: ID=  employeeID, name= name, address=  address, phonenumber= phonenumber, email= email, SOC= SOC, Role= role, DoctorIndexNumber= DoctorIndexNumber"
     */
    @Override
    public String toString() {
        return super.toString() + ", DoctorIndexNumber=" + doctorIndexNumber;
    }
}
