@startuml
autonumber
actor Client as C
participant "ImportTestUI" as UI
participant ":ImportTestController" as CTRL
participant ":ImportTests" as Imp
participant ":Company" as company
participant "clastore:ClinicalAnalysisLabStore" as clastore
participant "cstore:ClientStore" as cstore
participant "tstore:TestStore" as tstore
participant "pcstore:ParameterCategoryStore" as pcstore
participant "pstore:ParameterStore" as pstore
participant "cla:ClinicalAnalysisLab" as cla
participant "ttstore:TestTypeStore" as ttstore
participant "tt:TestType" as tt
participant "c:Client" as c
participant "t:Test" as t
participant "p:Parameter" as p
participant "pc:ParameterCategory" as pc
participant ":AuthFacade" as Auth
participant ":Email" as Email
participant ":UserStore" as ustore
participant "u:User" as u





activate C
C -> UI: wants to import clinical tests
activate UI
deactivate CTRL
UI --> C: show the list of files
deactivate UI

C -> UI: choose the file
activate UI
activate CTRL
UI --> CTRL :readTestFromCSV

activate Imp
CTRL --> Imp: createClientfromFile(metadata)

Imp --> company:getClientList()
activate company
deactivate company

Imp --> cstore: createClient()
activate cstore
cstore -> c** : c = Client(phoneNumber, cc, nhs, tinNumber, birthDate, email, name)
cstore -> cstore: saveClient()

Imp --> company: getAuthFacade()
activate company
deactivate company
Imp --> Auth: addUserWithRole()
deactivate cstore
activate Auth
Auth -> ustore:create()
deactivate Auth
activate ustore
ustore -> u**: u = User(id, password, name, role)
deactivate ustore
Imp --> Email: sendPasswordNotification()
activate Email
deactivate Email

Imp --> company:getClinicalAnalysisLabList()
activate company
deactivate company
Imp --> clastore: verifyClinicalLabID()
activate clastore
activate cla
clastore -> cla: getId()
deactivate clastore
deactivate cla

Imp --> company: getTestTypeList();
activate company
deactivate company
Imp --> ttstore: getTestTypeExist()

activate ttstore
ttstore -> tt : getDescription()
deactivate ttstore
activate tt


Imp --> company:getParameterCategoryList()
activate company
deactivate tt

deactivate company
activate pcstore
Imp --> pcstore: getParameterCategoryExist()
deactivate pcstore

Imp --> company:getParameterList()
activate company
deactivate company
activate pstore
Imp --> pstore: getParameterExist()
deactivate pstore

Imp --> company:getTestList()
activate company
deactivate company
Imp --> tstore: createTest()
activate tstore
tstore -> t**: t = Test(testNhsNumber, clientTin, testType, catList, paList)
tstore -> tstore: saveTest()
ref over Imp: addTestResult(parameterCode,result)


Imp --> t:changeState()
deactivate tstore
activate t

CTRL --> Imp: getTestFileList()
deactivate t


UI --> CTRL :saveFileTestList()


deactivate CTRL


UI --> C: shows the tests that were imported
deactivate UI





deactivate UI
deactivate C
@enduml